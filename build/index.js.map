{"version":3,"sources":["../src/index.ts","../src/download.ts","../src/getVersion.ts","../src/requestHandler.ts","../src/xmlTransform.ts"],"sourcesContent":["import http from 'http';\nimport fs from 'fs';\nimport { resolve } from 'path';\nimport Url from 'url';\nimport Download from './download';\nimport RequestHandler from './requestHandler';\nimport XmlTransform from './xmlTransform';\n\nconst port = 8000;\n\nconst getRemoteVtexXml = async ({\n  storeDomain,\n  storeName,\n  xmlName,\n  salesChannel,\n}: {\n  storeDomain: string;\n  storeName: string;\n  xmlName: string;\n  salesChannel: string;\n}): Promise<fs.PathLike> => {\n  const time = new Date().getTime();\n  const file = resolve('./tmp', `${storeName}-${xmlName}-${time}.xml`);\n  const url = `https://${storeDomain}/XMLData/${xmlName}.xml?sc=${salesChannel}`;\n  console.log(`Downloading XML from: ${url}`);\n  const savedFile = await Download(url, file);\n  return savedFile;\n};\n\nconst server = http.createServer(RequestHandler);\nlet requestCounter = 0;\n\nserver.on('request', async (req, res) => {\n  if (res.writableEnded) {\n    return;\n  }\n\n  const { headers, method, url } = req;\n  const queryObject = Url.parse(url ?? '', true).query;\n\n  requestCounter += 1;\n  console.log(`Request (${requestCounter}) - START: ${url}`);\n  try {\n    const fileName = await getRemoteVtexXml(\n      queryObject as {\n        storeDomain: string;\n        storeName: string;\n        xmlName: string;\n        salesChannel: string;\n      },\n    );\n\n    console.log(`File downloaded: ${fileName}`);\n\n    const fileNameTransformed = await XmlTransform({\n      file: fileName,\n      storeName: (queryObject?.storeName ?? '') as string,\n      storeDomain: (queryObject?.storeDomain ?? '') as string,\n      regionId: (queryObject?.regionId ?? '') as string,\n      salesChannel: (queryObject?.salesChannel ?? '') as string,\n      complete: !!queryObject?.complete,\n      isMainFeed: !!queryObject?.isMainFeed,\n      globalCategory: queryObject?.globalCategory as string,\n      customProductUrlType: queryObject?.customProductUrlType as any,\n    });\n    const stat = fs.statSync(fileNameTransformed);\n\n    const readStream = fs.createReadStream(fileNameTransformed);\n    readStream.on('open', () =>\n      res.writeHead(200, {\n        'Content-Type': 'text/xml',\n        'Content-Length': stat.size,\n      }),\n    );\n    readStream.pipe(res);\n  } catch (err) {\n    res.statusCode = 500;\n    console.log(err);\n    console.log(\n      'ERR:',\n      JSON.stringify({\n        headers,\n        method,\n        url,\n        err,\n      }),\n    );\n    res.end('Error');\n  }\n  console.log(`Request (${requestCounter}) - END: ${url}`);\n});\n\nserver.listen(port, () => {\n  console.log(`Server up on port ${port}`);\n});\n\nserver.timeout = 300000; //  5 minutes\n","import http from 'https';\nimport fs from 'fs';\nimport path from 'path';\n\nasync function Download(url: string, dest: fs.PathLike): Promise<fs.PathLike> {\n  // clean download folder\n  const tmpFolder = path.dirname(dest as string);\n  fs.readdir(tmpFolder, (_, files) => {\n    files?.forEach((file) => {\n      fs.stat(path.join(tmpFolder, file), (err, stat) => {\n        if (err) {\n          console.error(err);\n        }\n        const now = new Date().getTime();\n        const endTime = new Date(stat.ctime).getTime() + 60000 * 10;\n        if (now > endTime) {\n          // @ts-ignore\n          // remove file using fs\n          fs.unlink(path.join(tmpFolder, file), (errUnlink) => {\n            if (errUnlink) {\n              console.error(errUnlink);\n            }\n          });\n        }\n      });\n    });\n  });\n\n  // deletar arquivos mais velhos do que uma semana, evitar enxer disco\n  const weekInMillis = 60000 * 60 * 24 * 7;\n  fs.readdir(tmpFolder, (_, files) => {\n    files?.forEach((file) => {\n      fs.stat(path.join(tmpFolder, file), (err, stat) => {\n        if (err) {\n          console.error(err);\n        }\n        const now = new Date().getTime();\n        const endTime = new Date(stat.ctime).getTime() + weekInMillis;\n        if (now > endTime) {\n          // @ts-ignore\n          // remove file using fs\n          fs.unlink(path.join(tmpFolder, file), (errUnlink) => {\n            if (errUnlink) {\n              console.error(errUnlink);\n            }\n          });\n        }\n      });\n    });\n  });\n\n  // download proccess\n  return new Promise((resolve, reject) => {\n    const file = fs.createWriteStream(dest, { flags: 'wx' });\n\n    const request = http.get(\n      url,\n      {\n        headers: {\n          'User-Agent':\n            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',\n        },\n      },\n      (response) => {\n        if (response.statusCode === 200) {\n          response.pipe(file);\n        } else {\n          file.close();\n          fs.unlink(dest, () => {}); // Delete temp file\n          reject(Error(`Server responded with ${response.statusCode} for ${url}: ${response.statusMessage}`));\n        }\n      },\n    );\n\n    request.on('error', (err) => {\n      file.close();\n      fs.unlink(dest, () => {}); // Delete temp file\n      reject(err.message);\n    });\n\n    file.on('finish', () => {\n      resolve(dest);\n    });\n\n    file.on('error', (err) => {\n      file.close();\n      fs.unlink(dest, () => {}); // Delete temp file\n      reject(err.message);\n    });\n  });\n}\n\nexport default Download;\n","import fs from 'fs';\n\nconst getVersion = (): string => {\n  let version;\n  try {\n    // validate if exist package.json\n    if (fs.statSync('./package.json')) {\n      const jsonFile = process.env.NODE_ENV === 'production'\n        ? './package.json'\n        : '../package.json';\n\n      version = JSON.parse(fs.readFileSync(jsonFile, 'utf8')).version;\n    } else {\n      version = 'unknown';\n    }\n  } catch (e) {\n    version = 'unknown';\n  }\n\n  return version;\n};\n\nexport default getVersion;\n","import getVersion from 'getVersion';\nimport http from 'http';\nimport Url from 'url';\n\nconst version = getVersion();\n\nconst RequestHandler = (req: http.IncomingMessage, res: http.ServerResponse) => {\n  const urlParsed = Url.parse(req?.url ?? '', true);\n  const queryObject = urlParsed.query;\n  if (req.method !== 'GET' || !['/xml-parse', '/status'].includes(urlParsed?.pathname || '')) {\n    res.statusCode = 404;\n    res.end('Method or end-point not allowed');\n    return;\n  }\n\n  if (urlParsed?.pathname === '/status') {\n    res.statusCode = 200;\n    res.end(`ok - ${version}`);\n    return;\n  }\n\n  if (urlParsed?.pathname === '/xml-parse') {\n    const requiredParams = ['storeDomain', 'storeName', 'xmlName', 'regionId', 'salesChannel'];\n\n    // eslint-disable-next-line no-restricted-syntax\n    for (const param of requiredParams) {\n      if (!queryObject[param]) {\n        res.statusCode = 400;\n        res.end(`Missing required parameter: ${param}`);\n        return;\n      }\n    }\n  }\n\n  // req.pipe(res);\n};\n\nexport default RequestHandler;\n","import fs, { unlink } from 'fs';\nimport { XMLParser, XMLBuilder, XMLValidator } from 'fast-xml-parser';\nimport He from 'he';\nimport { setupCache, buildMemoryStorage } from 'axios-cache-interceptor';\nimport Axios from 'axios';\nimport { URL } from 'url';\nimport getVersion from 'getVersion';\n\nconst version = getVersion();\n\nconst api = setupCache(Axios, {\n  debug: console.log,\n  storage: buildMemoryStorage(),\n  ttl: 1000 * 60 * 1, // 1 minute\n});\n\ntype CustomProductUrlType = undefined | 'prefix-detail';\n\nconst formatProductPathUrl = (urlObject: URL, customTypeFormat: CustomProductUrlType) => {\n  // get slug os product from default VTEX URL (/p)\n  const slug =\n    urlObject.pathname\n      .split('/')\n      .filter((i) => !!i)\n      .at(0) ?? '';\n  switch (customTypeFormat) {\n    case 'prefix-detail':\n      return `/detail/${slug}`;\n    default:\n      return urlObject.pathname;\n  }\n};\n\nconst XmlTransform = async ({\n  storeName,\n  storeDomain,\n  file,\n  regionId,\n  salesChannel,\n  complete = false,\n  isMainFeed = false,\n  globalCategory,\n  customProductUrlType,\n}: {\n  storeName: string;\n  storeDomain: string;\n  file: fs.PathLike;\n  regionId: string;\n  salesChannel: string;\n  complete: boolean;\n  isMainFeed: boolean;\n  globalCategory: string;\n  customProductUrlType: CustomProductUrlType;\n}): Promise<fs.PathLike> => {\n  const xmlData = fs.readFileSync(file, 'utf8');\n\n  const optionsDecode = {\n    attributeNamePrefix: '@_',\n    // attrNodeName: \"attr\", //default is 'false'\n    textNodeName: '#text',\n    ignoreAttributes: false,\n    ignoreNameSpace: false,\n    allowBooleanAttributes: false,\n    parseNodeValue: true,\n    parseAttributeValue: false,\n    trimValues: true,\n    cdataTagName: '__cdata', // default is 'false'\n    cdataPositionChar: '\\\\c',\n    parseTrueNumberOnly: false,\n    numParseOptions: {\n      hex: true,\n      leadingZeros: true,\n      // skipLike: /\\+[0-9]{10}/\n    },\n    arrayMode: false, // \"strict\"\n    attrValueProcessor: (val: string, _attrName: string) => He.decode(val, { isAttributeValue: true }), // default is a=>a\n    tagValueProcessor: (val: string, _tagName: string) => He.decode(val), // default is a=>a\n    // stopNodes: [\"parse-me-as-string\"],\n  };\n\n  const lines = xmlData.split('\\n');\n  const lastLine = lines[lines.length - 1];\n  const commentMatch = lastLine.match(/<!--(.*?)-->/);\n  const vtexXmlDetails = commentMatch?.[1] ?? ' -- no details -- ';\n  console.log('Start XML reading and validation');\n\n  const validated = XMLValidator.validate(xmlData);\n\n  if (validated === true) {\n    try {\n      const xmlParser = new XMLParser();\n      const jsonObj = xmlParser.parse(xmlData, optionsDecode);\n\n      let newEntries = jsonObj?.rss?.channel?.item;\n      if (jsonObj?.rss?.channel?.item?.length) {\n        const skuList = jsonObj?.rss?.channel?.item.map((item: any) => item?.['g:id']);\n\n        const chunkSize = 50;\n        const chunks = [...Array(Math.ceil(skuList.length / chunkSize))].map((_) => skuList.splice(0, chunkSize));\n\n        const productDetails = (\n          await Promise.all(\n            chunks.map(async (chunk: string[]) => {\n              const urlSearch = `https://${storeName}.myvtex.com/api/catalog_system/pub/products/search/?_from=0&_to=49&${chunk\n                .map((i) => `fq=skuId:${i}`)\n                .join('&')}&sc=${salesChannel}`;\n\n              //console.log(`Fetching product details from: ${urlSearch}`);\n\n              const response = (await api.get(urlSearch)) as any;\n\n              if (!response?.data?.length) {\n                console.log(`API response is empty for ${urlSearch}`);\n                return [];\n              }\n\n              return response.data?.reduce(\n                (stack: any[], product: any) =>\n                  stack.concat(\n                    product.items.map((sku: any) => {\n                      const { unitMultiplier, sellers, itemId, ean, measurementUnit } = sku;\n                      const seller = sellers?.find(({ sellerDefault }: any) => !!sellerDefault);\n\n                      let price = seller?.commertialOffer?.ListPrice;\n                      const salePrice = seller?.commertialOffer?.Price;\n                      const availability = seller?.commertialOffer?.IsAvailable;\n\n                      if (seller) {\n                        // eslint-disable-next-line no-unsafe-optional-chaining\n                        price = +seller?.commertialOffer?.ListPrice?.toFixed(2);\n\n                        if (Number.isNaN(price)) {\n                          // eslint-disable-next-line no-unsafe-optional-chaining\n                          price = (+seller?.commertialOffer?.ListPrice)?.toFixed(2);\n                        }\n                      }\n\n                      return {\n                        ean,\n                        itemId,\n                        unitMultiplier,\n                        measurementUnit,\n                        price,\n                        salePrice,\n                        availability,\n                      };\n                    }),\n                  ),\n                [],\n              );\n            }),\n          )\n        )\n          .reduce((stack, group) => stack.concat(group), [])\n          .reduce((stack: any, item: any) => {\n            Object.assign(stack, { [item.itemId]: item });\n            return stack;\n          }, {});\n\n        fs.writeFileSync('products.json', JSON.stringify(productDetails), 'utf8');\n\n        newEntries = await Promise.all(\n          jsonObj?.rss?.channel?.item.map(async (item: any, index: number) => {\n            let link = item?.['g:link']?.__cdata || item?.['link']?.__cdata || item?.['link'];\n            let title = item?.['g:title']?.__cdata || item?.['title']?.__cdata || item?.['title'];\n            let description =\n              item?.['g:description']?.__cdata || item?.['description']?.__cdata || item?.['description'];\n\n            if (item?.['link']) {\n              delete item?.['link'];\n            }\n\n            if (item?.['title']) {\n              delete item?.['title'];\n            }\n\n            if (item?.['description']) {\n              delete item?.['description'];\n            }\n\n            let price = item?.['g:price'];\n            let salePrice = item?.['g:sale_price'];\n            const id = item?.['g:id'];\n\n            // add new params\n            try {\n              const a = new URL(link);\n              // a.searchParams.append(\"region_id\", regionId);\n              a.searchParams.append('sc', salesChannel);\n              a.hostname = storeDomain;\n              a.pathname = formatProductPathUrl(a, customProductUrlType);\n\n              link = a.toString();\n            } catch (e: any) {\n              // @ts-ignore\n              console.log('Error parsing URL:', link, e?.message);\n            }\n\n            // OMG, this is a hack, but it works\n            // - get details from API\n            // VTEX doesen't have multiplier in XML: https://help.vtex.com/pt/known-issues/xml-loads-product-price-without-multiplier--3B1Vi8l3gICcqKuqcAoKqI\n\n            // if product exist in list to change value\n            if ({}.hasOwnProperty.call(productDetails, `${id}`)) {\n              salePrice = productDetails[`${id}`].salePrice;\n              price = productDetails[`${id}`].price;\n            } else {\n              console.log(`SKU id ${id} no found in API`);\n            }\n\n            let availability;\n\n            if (isMainFeed) {\n              availability = 'out of stock';\n            } else {\n              availability = productDetails?.[`${id}`]?.availability ? 'in stock' : 'out of stock';\n            }\n\n            const isProductVariable =\n              (productDetails?.[`${id}`]?.measurementUnit as string)?.toLocaleLowerCase() === 'kg';\n\n            if (complete) {\n              return {\n                ...item,\n                'g:title': {\n                  __cdata: title,\n                },\n                'g:description': {\n                  __cdata: description,\n                },\n                'g:link': {\n                  __cdata: link,\n                },\n                'g:availability': availability,\n                ...(isMainFeed\n                  ? {\n                      'g:price': `${price} BRL`,\n                    } // se for main feed, não apresenta região\n                  : {\n                      // se não for main feed, apresenta preço e região\n                      'g:region_id': regionId,\n                      'g:price': `${price} BRL`,\n                      'g:sale_price': `${salePrice} BRL`,\n                    }),\n                ...(globalCategory ? { 'g:google_product_category': globalCategory } : {}),\n                ...(isProductVariable ? { 'g:gtin': '' } : {}),\n              };\n            }\n            return {\n              'g:id': item['g:id'],\n              'g:region_id': regionId,\n              'g:price': `${price} BRL`,\n              'g:sale_price': `${salePrice} BRL`,\n              'g:availability': availability,\n            };\n          }),\n        );\n      } else {\n        console.log('root node <rss> not exist in this XML');\n      }\n\n      const optionsEncode = {\n        /*\n        attributeNamePrefix: '@_',\n        // attrNodeName: \"@\", //default is false\n        // textNodeName: \"#text\",\n        ignoreAttributes: false,\n        ignoreNameSpace: false,\n        cdataPositionChar: '\\\\c',\n        format: true,\n        indentBy: '  ',\n        supressEmptyNode: false,\n        tagValueProcessor: (a: string) => He.encode(a, { useNamedReferences: true }), // default is a=>a\n        attrValueProcessor: (a: string) =>\n        He.encode(a, {\n        // @ts-ignore\n        isAttributeValue: true,\n        useNamedReferences: true,\n        }), // default is a=>a\n        */\n        // preserveOrder: true,\n        cdataPropName: '__cdata',\n        arrayNodeName: 'item',\n      };\n      const xmlBuilder = new XMLBuilder(optionsEncode);\n\n      const xml = xmlBuilder.build(newEntries);\n\n      fs.writeFileSync(\n        file,\n        `<?xml version=\"1.0\"?>\n<rss xmlns:g=\"http://base.google.com/ns/1.0\" version=\"2.0\">\n  <channel>\n${xml}\n</channel>\n</rss><!-- transformedBy=\"vtex-xml-transformer-${version}\" region_id=\"${regionId}\" | From VTEX: ${vtexXmlDetails} -->`,\n        'utf8',\n      );\n    } catch (err: any) {\n      // @ts-ignore\n      console.log('CATCH ERROR XmlTransform', err);\n    }\n  } else {\n    console.log('XMLData is not valid XML');\n  }\n\n  return file;\n};\n\nexport default XmlTransform;\n"],"mappings":"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","names":["import_fs","import_path","import_url","path","fs","resolve","http","import_fs","version","fs","Url","import_fs","import_url","version","Axios","fs","He","http","Url","fs"]}